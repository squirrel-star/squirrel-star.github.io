<!DOCTYPE html>
<meta charset="utf-8">

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v4.js"></script>
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
<script src="https://d3js.org/d3-geo-projection.v2.min.js"></script>

<!-- Create an element where the map will take place -->
<svg id="myMap" width="400" height="400"></svg>

<script>

var year = 2015;
var measurement = "tonnage";

drawMap(year, measurement)

function drawMap(year, measurement) {

	// Convert the year and measurement to a concatenated string
	var yearString = year.toString();
	var measurementString = measurement.toString();
	var option = measurementString.concat(yearString);
	
	console.log(option);

	// The svg
	var svg = d3.select("svg"),
	  width = +svg.attr("width"),
	  height = +svg.attr("height");

	// Map and projection
	var path = d3.geoPath();
	var projection = d3.geoConicConformal()
	  .scale(20*width / Math.PI)
	  .translate([width / 2 + 150, height / 2 +2670]);

	// Data and color scale
	var data = {};
	if (measurement === "tonnage") {
		var colorScale = d3.scaleThreshold()
		  .domain([0,50,100,1000,2000,3000,20000])
		  .range(d3.schemeBlues[7]);
	} else {
		var colorScale = d3.scaleThreshold()
		  .domain([0,1000,3000,5000,7000,9000,10000])
		  .range(d3.schemeReds[7]);
	}

	// Load external data and boot
	d3.queue()
	  .defer(d3.json, "https://raw.githubusercontent.com/squirrel-star/scotland/main/geojsonscotlandladjson.geojson")
	  .defer(d3.csv, "https://raw.githubusercontent.com/squirrel-star/scotland/main/fishperLA.csv", function(d) { data[d.code] = +d[option];
	  })
	  .await(ready);
	
	svg.selectAll("*").remove();

	function ready(error, topo) {

	  // Draw the map
	  svg.append("g")
		.selectAll("path")
		.data(topo.features)
		.enter()
		.append("path")
		  // draw each country
		  .attr("d", d3.geoPath()
			.projection(projection)
		  )
		  // set the color of each country
			.attr("fill", function (d) {
			d.total = data[d.properties.LAD13NM] || 0;
			return colorScale(d.total);
		  });
	}	
}

</script>

<!-- Create a div where the buttons will take place -->
<div id="yearButtonHere"></div>
<div id="measurementButtonHere"></div>

<script>

// List of groups (here I have one group per column)
    var years = ["2015", "2016", "2017", "2018", "2019"]
	var measurements = ["tonnage", "value"]

// Initialize the buttons
var yearButton = d3.select("#yearButtonHere")
  .append('select')
var measurementButton = d3.select("#measurementButtonHere")
  .append('select')

// add the options to the year button
  yearButton // Add a button
  .selectAll('myOptions') // Next 4 lines add 6 options = 6 colors
 	.data(years)
  .enter()
	.append('option')
  .text(function (d) { return d; }) // text showed in the menu
  .attr("value", function (d) { return d; }) // corresponding value returned by the button
  
// add the options to the measurement button
  measurementButton // Add a button
  .selectAll('myOptions') // Next 4 lines add 6 options = 6 colors
 	.data(measurements)
  .enter()
	.append('option')
  .text(function (d) { return d; }) // text showed in the menu
  .attr("value", function (d) { return d; }) // corresponding value returned by the button

yearButton.on("change", function(d) {

    // recover the option that has been chosen
    var year = d3.select(this).property("value")

    // run the updateChart function with this selected option
    drawMap(year, measurement)
})

measurementButton.on("change", function(d) {

    // recover the option that has been chosen
    var measurement = d3.select(this).property("value")

    // run the updateChart function with this selected option
    drawMap(year, measurement)
})

</script>

<script>

var svg = document.querySelector( "svg" );
var svgData = new XMLSerializer().serializeToString( svg );

var canvas = document.createElement( "canvas" );
var ctx = canvas.getContext( "2d" );

var img = document.createElement( "img" );
img.setAttribute( "src", "data:image/svg+xml;base64," + btoa( svgData ) );

img.onload = function() {
    ctx.drawImage( img, 0, 0 );
    
    // Now is done
    console.log( canvas.toDataURL( "image/png" ) );
};

</script>

<script>



</script>
