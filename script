<!DOCTYPE html>
<meta charset="utf-8">

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v6.min.js"></script>
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
<script src="https://d3js.org/d3-geo-projection.v2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3-legend/2.24.0/d3-legend.min.js"></script>

<body style="font-family: sans-serif">

<!-- Create an element where the map will take place -->
<svg id="myMap" width="400" height="400"></svg>
<svg id="myLegend" width="400" height="400"></svg>

<script>

var year = 2015;
var measurement = "Tonnage";
var fish = "Total demersal";

var tonnageColor = ["#ffffcc","#c7e9b4","#7fcdbb","#41b6c4","#2c7fb8"];
var valueColor = tonnageColor;
var circleFillColor = "chocolate";
var circleStrokeColor = circleFillColor;
var tonnageDivisions = [100,1000,10000,100000];
var valueDivisions = [100,1000,10000,100000];

var fishList = ["Total demersal","Total pelagic","Total shellfish","Total landings","Edible crabs","Lobsters","Nephrops","Scallops","Velvet crabs","Other shellfish","Mackerel","Clams","Razor fish","Nephrops" ,"Queen scallops","Whelks","Haddock","Monkfish","Other demersal","Other pelagic","Squid","Sprats","Cod","Dabs","Dogfish","Gurnards","Hake","Halibut","Lemon sole","Ling","Megrims","Plaice","Saithe","Sandeels","Skates and rays","Whiting","Witches","Black scabbardfish","Blue ling","Forkbeard","Tusk","Bluemouth","Common mora","Greenland halibut","Rabbit fish" ,"Redfish","Roundnose grenadier","Green crabs","Catfish","Pollack","Turbot","Blue whiting","Herring","Horse mackerel","Conger eels","Wrasses","Monkfish"];

drawMap(year, measurement, fish, tonnageColor, valueColor, circleFillColor, circleStrokeColor, tonnageDivisions, valueDivisions, fishList)

function drawMap(year, measurement, fish, tonnageColor, valueColor, circleFillColor, circleStrokeColor, tonnageDivisions, valueDivisions, fishList) {

	// Convert the year and measurement to a concatenated string
	var yearString = year.toString();
	var measurementString = measurement.toString();
	var option = measurementString.concat(yearString);

	// The svg to hold the map
	var svg = d3.select("#myMap"),
		width = +svg.attr("width"),
		height = +svg.attr("height");
	
	// The svg to hold the legend
	var svgLegend = d3.select("#myLegend");

	// Map and projection
	var path = d3.geoPath();
	var projection = d3.geoMercator()
		.center([-4.1826,56.8169])
		.scale(1400)
		.translate([width/2, height/2])
	
	// Color scale and legend title
	if (measurement === "Tonnage") {
		var colorScale = d3.scaleThreshold()
			.domain(tonnageDivisions)
			.range(tonnageColor);
		var legendTitle = "Tonnage";
		var divisions = tonnageDivisions;
	} else {
		var colorScale = d3.scaleThreshold()
			.domain(valueDivisions)
			.range(valueColor);
		var divisions = valueDivisions;
		var legendTitle = "Value in Â£'000";
	}
	
	// Remove the existing map and legend
	svg.selectAll("*").remove();
	svgLegend.selectAll("*").remove();
	
	// Bring the data in via a promise

	const files = ["https://raw.githubusercontent.com/squirrel-star/scotland/main/geojsonscotlandladjson.geojson", "https://raw.githubusercontent.com/squirrel-star/scotland/main/fishperLA.csv", "https://raw.githubusercontent.com/squirrel-star/scotland/main/landingarea.csv"];
	const quantityByCode = new Map();
	function row(d) {
		quantityByCode.set(d.code, parseFloat(d[option]));
	};
	
	const promises = [];

	files.forEach(function(url, index) {
		promises.push(index ? d3.csv(url, row) : d3.json(url))
	});

	Promise.all(promises).then(function(data) {
	
	// Any code that depends on 'data' (the information from the promises, in the form data[i] is the ith promise, goes here.
	
	// Add the bubbles' locations

	var markers = [
		{long: -2.0943, lat: 57.1497}, // Aberdeen
		{long: -2.7005, lat: 56.2230}, // Anstruther
		{long: -4.6292, lat: 55.4586}, // Ayr
		{long: -2.9673, lat: 57.6774}, // Buckie
		{long: -5.6054, lat: 55.4241}, // Campbeltown
		{long: -2.0911, lat: 55.8691}, // Eyemouth
		{long: -2.0076, lat: 57.6934}, // Fraserburgh
		{long: -5.0492, lat: 58.4588}, // Kinlochbervie
		{long: -5.2426, lat: 58.1462}, // Lochinver
		{long: -5.8272, lat: 57.0038}, // Mallaig
		{long: -5.4710, lat: 56.4152}, // Oban
		{long: -2.9605, lat: 58.9809}, // Orkney
		{long: -1.7841, lat: 57.5081}, // Peterhead
		{long: -6.1960, lat: 57.4125}, // Portree
		{long: -3.5526, lat: 58.6110}, // Scrabster
		{long: -1.2659, lat: 60.5297}, // Shetland
		{long: -6.3849, lat: 58.2094}, // Stornoway
		{long: -5.1613, lat: 57.8954}, // Ullapool
	];

	// Draw the map
	svg.append("g")
		.selectAll("path")
		.data(data[0].features)
		.enter()
		.append("path")
			// draw each country
			.attr("d", d3.geoPath()
			.projection(projection)
			)
			// set the color of each country
			.attr("fill", function (d) {
				d.total = quantityByCode.get(d.properties.LAD13NM) || 0;
				return colorScale(d.total);
			})
	
	// Load bubble size data and add the bubbles to the map.
	
	d3.csv("https://raw.githubusercontent.com/squirrel-star/scotland/main/landingarea.csv").then(function(data) {
		var i = 0;
		var bubbleData = {};
		var newPlace;
		var oldPlace = "Aberdeen";
		data.forEach(function(d) {
			d[option] = +d[option];
			newPlace = d["code"];
			if ( oldPlace != newPlace) {
				i++;
				oldPlace = newPlace;
			}
			if (d["fish"] == fish) {
				markers[i]["numFish"] = d[option];
			}
		});
	
	    // create a tooltip
    var Tooltip = d3.select("#my_dataviz")
      .append("div")
      .attr("class", "tooltip")
      .style("opacity", 1)
      .style("background-color", "white")
      .style("border", "solid")
      .style("border-width", "2px")
      .style("border-radius", "5px")
      .style("padding", "5px")

    // Three function that change the tooltip when user hover / move / leave a cell
    var mouseover = function(d) {
      Tooltip.style("opacity", 1)
    }
    var mousemove = function(d) {
      Tooltip
        .html(d.name + "<br>" + "long: " + d.long + "<br>" + "lat: " + d.lat)
        .style("left", (d3.mouse(this)[0]+10) + "px")
        .style("top", (d3.mouse(this)[1]) + "px")
    }
    var mouseleave = function(d) {
      Tooltip.style("opacity", 0)
    }

		
	// Add a scale for bubble size.
    var size = d3.scaleSqrt()
      .domain([1,16000])  // What's in the data
      .range([ 5, 15])  // Size in pixel

	// Add each bubble.
	svg
		.selectAll("myCircles")
		.data(markers)
		.enter()
		.append("circle")
			.attr("cx", function(d){ return projection([d.long, d.lat])[0]})
			.attr("cy", function(d){ return projection([d.long, d.lat])[1]})
			.attr("r", function(d) { return size(d.numFish)})
			.style("fill", circleFillColor)
			.attr("stroke", circleStrokeColor)
			.attr("stroke-width", 1)
			.attr("fill-opacity", .4)
			.attr("stroke-opacity", .6);
	});

	// Draw the legend
	svgLegend.append("g")
		.attr("class", "legend")
		.attr("transform", "translate(20,20)");

	var legend = d3.legendColor()
		.labelFormat(d3.format(".0f"))
		.labels(d3.legendHelpers.thresholdLabels)
		.title(legendTitle)
		.scale(colorScale)
		.shapeHeight(40)
		.cells(tonnageDivisions)

	svgLegend.select(".legend")
		.call(legend);
  
	});

} // End of function drawMap

</script>

<!-- Create a div where the buttons will take place -->
<div id="yearButtonHere"></div>
<div id="measurementButtonHere"></div>
<div id="fishButtonHere"></div>

<script>

// List of groups (here I have one group per column)
    var years = ["2015", "2016", "2017", "2018", "2019"]
	var measurements = ["Tonnage", "Value"]

// Initialize the buttons
var yearButton = d3.select("#yearButtonHere")
	.append('select')
var measurementButton = d3.select("#measurementButtonHere")
	.append('select')
var fishButton = d3.select("#fishButtonHere")
	.append('select')

// add the options to the year button
yearButton // Add a button
	.selectAll('myOptions') // Next 4 lines add 6 options = 6 colors
	.data(years)
	.enter()
	.append('option')
		.text(function (d) { return d; }) // text showed in the menu
		.attr("value", function (d) { return d; }) // corresponding value returned by the button
  
// add the options to the measurement button
  measurementButton // Add a button
  .selectAll('myOptions')
 	.data(measurements)
  .enter()
	.append('option')
  .text(function (d) { return d; }) // text showed in the menu
  .attr("value", function (d) { return d; }) // corresponding value returned by the button
  
// add the options to the fish button
  fishButton // Add a button
  .selectAll('myOptions')
 	.data(fishList)
  .enter()
	.append('option')
  .text(function (d) { return d; }) // text showed in the menu
  .attr("value", function (d) { return d; }) // corresponding value returned by the button

yearButton.on("change", function(d) {

    // recover the option that has been chosen
    var year = d3.select(this).property("value")

    // run the updateChart function with this selected option
    drawMap(year, measurement, fish, tonnageColor, valueColor, circleFillColor, circleStrokeColor, tonnageDivisions, valueDivisions, fishList)
})

measurementButton.on("change", function(d) {

    // recover the option that has been chosen
    var measurement = d3.select(this).property("value")

    // run the updateChart function with this selected option
    drawMap(year, measurement, fish, tonnageColor, valueColor, circleFillColor, circleStrokeColor, tonnageDivisions, valueDivisions, fishList)
})

fishButton.on("change", function(d) {

    // recover the option that has been chosen
    var fish = d3.select(this).property("value")

    // run the updateChart function with this selected option
    drawMap(year, measurement, fish, tonnageColor, valueColor, circleFillColor, circleStrokeColor, tonnageDivisions, valueDivisions, fishList)
})

</script>

</body>
